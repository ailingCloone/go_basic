// Code generated by goctl. DO NOT EDIT.

package customer_card

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	customerCardFieldNames          = builder.RawFieldNames(&CustomerCard{})
	customerCardRows                = strings.Join(customerCardFieldNames, ",")
	customerCardRowsExpectAutoSet   = strings.Join(stringx.Remove(customerCardFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	customerCardRowsWithPlaceHolder = strings.Join(stringx.Remove(customerCardFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	customerCardModel interface {
		Insert(ctx context.Context, data *CustomerCard) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CustomerCard, error)
		Update(ctx context.Context, data *CustomerCard) error
		Delete(ctx context.Context, id int64) error
		FindOneCustomerId(ctx context.Context, id int64) (*[]CustomerCardInfo, error)
	}

	defaultCustomerCardModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CustomerCard struct {
		Id         int64         `db:"id"`
		CustomerId sql.NullInt64 `db:"customer_id"`
		P1no       string        `db:"p1no"`
		ValidFrom  time.Time     `db:"valid_from"`
		ValidTo    time.Time     `db:"valid_to"`
		Outlet     int64         `db:"outlet"`
		CardId     int64         `db:"card_id"`
		RenewAt    time.Time     `db:"renew_at"`
		Updated    time.Time     `db:"updated"`
		Created    time.Time     `db:"created"`
		Active     int64         `db:"active"`
	}

	CustomerCardInfo struct {
		Guid        string `json:"guid,omitempty"`
		Type string`json:"type"`
		Description string `json:"description"`
		Expiry       string `json:"expiry"`
		Number    string `json:"number"`
	}

	// CustomerCardInfo struct {
	// 	Guid        string    `db:"guid"`
	// 	Type        string    `db:"type"`
	// 	Description string    `db:"description"`
	// 	P1No        string    `db:"p1no"`
	// 	ValidTo     time.Time `db:"valid_to"`
	// }
	
)

func newCustomerCardModel(conn sqlx.SqlConn) *defaultCustomerCardModel {
	return &defaultCustomerCardModel{
		conn:  conn,
		table: "`customer_card`",
	}
}

func (m *defaultCustomerCardModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCustomerCardModel) FindOne(ctx context.Context, id int64) (*CustomerCard, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", customerCardRows, m.table)
	var resp CustomerCard
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCustomerCardModel) Insert(ctx context.Context, data *CustomerCard) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, customerCardRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CustomerId, data.P1no, data.ValidFrom, data.ValidTo, data.Outlet, data.CardId, data.RenewAt, data.Updated, data.Created, data.Active)
	return ret, err
}

func (m *defaultCustomerCardModel) Update(ctx context.Context, data *CustomerCard) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, customerCardRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CustomerId, data.P1no, data.ValidFrom, data.ValidTo, data.Outlet, data.CardId, data.RenewAt, data.Updated, data.Created, data.Active, data.Id)
	return err
}

func (m *defaultCustomerCardModel) tableName() string {
	return m.table
}

func (m *defaultCustomerCardModel) FindOneCustomerId(ctx context.Context, id int64) (*[]CustomerCardInfo, error) {
	query := `select c.guid as guid, c.code as type, c.title as description, cc.valid_to, cc.p1no
	from card c
	inner join customer_card cc on c.id = cc.card_id and cc.active = 1 and cc.customer_id = ?
	where c.active = 1
	order by c.priority, cc.valid_from desc`
	var resp []CustomerCardInfo
	err := m.conn.QueryRowsCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		fmt.Println("err from not found",err)
		return nil, ErrNotFound
	default:
		fmt.Println("err from default",err)
		return nil, err
	}
}
