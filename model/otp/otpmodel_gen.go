// Code generated by goctl. DO NOT EDIT.

package otp

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	otpFieldNames          = builder.RawFieldNames(&Otp{})
	otpRows                = strings.Join(otpFieldNames, ",")
	otpRowsExpectAutoSet   = strings.Join(stringx.Remove(otpFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	otpRowsWithPlaceHolder = strings.Join(stringx.Remove(otpFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	otpModel interface {
		Insert(ctx context.Context, data *Otp) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Otp, error)
		Update(ctx context.Context, data *Otp) error
		Delete(ctx context.Context, id int64) error
		UpdateByGuid(ctx context.Context, data *Otp) error
		FindOneGuid(ctx context.Context, guid string) (*Otp, error)
	}

	defaultOtpModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Otp struct {
		Id           int64     `db:"id"`
		Guid         string    `db:"guid"`
		AuthType     int64     `db:"auth_type"`   // 1- SMS, 2- EMAIL
		SendStatus   int64     `db:"send_status"` // 1- Success, 2- Failed
		SendTime     time.Time `db:"send_time"`
		SendResponse string    `db:"send_response"`
		From         int64     `db:"from"`  //1- Forget Password, 2- Login Contact ,3- Login IC,  4- Register, 5- Profile Update
		Value        string    `db:"value"` // Can be contact or email
		Code         int64     `db:"code"`
		ExpiresIn    int       `db:"expires_in"`
		Created      time.Time `db:"created"`
		Active       int64     `db:"active"` // 0:Inactive, 1- Active, 2-Used
	}
)

func newOtpModel(conn sqlx.SqlConn) *defaultOtpModel {
	return &defaultOtpModel{
		conn:  conn,
		table: "`otp`",
	}
}

func (m *defaultOtpModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOtpModel) FindOne(ctx context.Context, id int64) (*Otp, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", otpRows, m.table)
	var resp Otp
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOtpModel) Insert(ctx context.Context, data *Otp) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, otpRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Guid, data.AuthType, data.SendStatus, data.SendTime, data.SendResponse, data.From, data.Value, data.Code, data.ExpiresIn, data.Created, data.Active)
	return ret, err
}

func (m *defaultOtpModel) Update(ctx context.Context, data *Otp) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, otpRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Guid, data.AuthType, data.SendStatus, data.SendTime, data.SendResponse, data.From, data.Value, data.Code, data.ExpiresIn, data.Created, data.Active, data.Id)
	return err
}

func (m *defaultOtpModel) tableName() string {
	return m.table
}

func (m *defaultOtpModel) UpdateByGuid(ctx context.Context, data *Otp) error {
	query := fmt.Sprintf("update %s set %s where `guid` = ? AND `active` = 1", m.table, otpRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Guid, data.AuthType, data.SendStatus, data.SendTime, data.SendResponse, data.From, data.Value, data.Code, data.ExpiresIn, data.Created, data.Active, data.Guid)
	return err
}

func (m *defaultOtpModel) FindOneGuid(ctx context.Context, guid string) (*Otp, error) {
	query := fmt.Sprintf("select %s from %s where `guid` = ? AND `active` = 1 limit 1", otpRows, m.table)
	var resp Otp
	err := m.conn.QueryRowCtx(ctx, &resp, query, guid)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

