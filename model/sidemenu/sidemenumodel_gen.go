// Code generated by goctl. DO NOT EDIT.

package sidemenu

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"
	"nrs_customer_module_backend/internal/global"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sidemenuFieldNames          = builder.RawFieldNames(&Sidemenu{})
	sidemenuRows                = strings.Join(sidemenuFieldNames, ",")
	sidemenuRowsExpectAutoSet   = strings.Join(stringx.Remove(sidemenuFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sidemenuRowsWithPlaceHolder = strings.Join(stringx.Remove(sidemenuFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	sidemenuModel interface {
		Insert(ctx context.Context, data *Sidemenu) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Sidemenu, error)
		FindOneByGuid(ctx context.Context, guid sql.NullString) (*Sidemenu, error)
		Update(ctx context.Context, data *Sidemenu) error
		Delete(ctx context.Context, id int64) error
		FindAll(ctx context.Context, role string, platform int64) (*[]FindAll, error)
	}

	defaultSidemenuModel struct {
		conn  sqlx.SqlConn
		table string
		CategoryTable string
	}

	Sidemenu struct {
		Id          int64          `db:"id"`
		Guid        sql.NullString `db:"guid"`
		ImageUrl    sql.NullString `db:"image_url"`
		WebImageUrl    sql.NullString `db:"web_image_url"`
		Title       sql.NullString `db:"title"`
		Action      sql.NullString `db:"action"`       // Action  like “./login”
		Priority    sql.NullInt64  `db:"priority"`     // The record will order based on this column, 1,2,3
		CategoryId    sql.NullInt64  `db:"category_id"`     // The record will order based on this column, 1,2,3
		DisplayFrom time.Time      `db:"display_from"` // Display from date time
		DisplayTo   time.Time      `db:"display_to"`   // Display until date time
		ParentId   int64      `db:"parent_id"`   // Display until date time
		Updated     time.Time      `db:"updated"`
		Created     time.Time      `db:"created"`
		Active      int64          `db:"active"`   // 0- Inactive , 1- Active
		Platform    int64          `db:"platform"` // 1- App 2-Portal
		Role         sql.NullString `db:"role"`
	}
	FindAll struct {
		Id          int64          `db:"id"`
		Guid        sql.NullString `db:"guid"`
		ImageUrl    sql.NullString `db:"image_url"`
		WebImageUrl    sql.NullString `db:"web_image_url"`
		Title       sql.NullString `db:"title"`
		Action      sql.NullString `db:"action"`       // Action  like “./login”
		Priority    sql.NullInt64  `db:"priority"`     // The record will order based on this column, 1,2,3
		CategoryId    sql.NullInt64  `db:"category_id"`     // The record will order based on this column, 1,2,3
		DisplayFrom time.Time      `db:"display_from"` // Display from date time
		DisplayTo   time.Time      `db:"display_to"`   // Display until date time
		ParentId   int64      `db:"parent_id"`   // Display until date time
		Updated     time.Time      `db:"updated"`
		Created     time.Time      `db:"created"`
		Active      int64          `db:"active"`   // 0- Inactive , 1- Active
		Platform    int64          `db:"platform"` // 1- App 2-Portal
		Role         sql.NullString `db:"role"`
		CategoryTitle string `db:"c_title"`
	}
	//sidemenu response struct -> APP
	PortalSidemenuMenus struct {
		CategoryTitle string `json:"category_title"`
		SidemenuResponse    []SidemenuResponse `json:"menu"`
	}
	
	SidemenuResponse struct {
		Guid        string `json:"guid"`
		ImageUrl    string `json:"image_url"`
		WebImageUrl    string `json:"web_image_url"`
		Title       string `json:"title"`
		Action      string `json:"action"`       // Action  like “./login”
	}
	//sidemenu Response Structure -> Portal
	PortalSidemenu struct {
		CategoryTitle             string                            `json:"header"`
		PortalSidemenuResponse    []PortalSidemenuResponseInterface `json:"menu"`
	}

	// PortalSidemenuResponseInterface is an interface type for PortalSidemenuResponse.
	PortalSidemenuResponseInterface interface{}

	// PortalSidemenuResponseWithSubmenu defines the structure for sidemenu response with submenu.
	PortalSidemenuResponseWithSubmenu struct {
		Guid     string    `json:"guid"`
		ImageUrl string    `json:"icon"`
		WebImageUrl string    `json:"web_icon"`
		Title    string    `json:"title"`
		Action   string    `json:"to"`       // Action like “./login”
		Children []Submenu `json:"children"`
		Permission []UserPermission `json:"permission,omitempty"`
	}

	// PortalSidemenuResponseWithoutSubmenu defines the structure for sidemenu response without submenu.
	PortalSidemenuResponseWithoutSubmenu struct {
		Guid     string `json:"guid"`
		ImageUrl string `json:"icon"`
		WebImageUrl string `json:"web_icon"`
		Title    string `json:"title"`
		Action   string `json:"to"` // Action like “./login”
		Permission []UserPermission `json:"permission,omitempty"`
	}

	// Submenu defines the structure for submenu.
	Submenu struct {
		Title string `json:"title"`
		To    string `json:"to"`
		Permission []UserPermission `json:"permission,omitempty"`
	}

	UserPermission struct {
		AllowAdd    int64 `json:"allow_add"`
		AllowEdit   int64 `json:"allow_edit"`
		AllowDelete int64 `json:"allow_delete"`
		AllowView   int64 `json:"allow_view"`
	})

func newSidemenuModel(conn sqlx.SqlConn) *defaultSidemenuModel {
	return &defaultSidemenuModel{
		conn:  conn,
		table: "`sidemenu s`",
		CategoryTable: "`category c`",
	}
}

func (m *defaultSidemenuModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSidemenuModel) FindOne(ctx context.Context, id int64) (*Sidemenu, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sidemenuRows, m.table)
	var resp Sidemenu
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSidemenuModel) FindOneByGuid(ctx context.Context, guid sql.NullString) (*Sidemenu, error) {
	var resp Sidemenu
	query := fmt.Sprintf("select %s from %s where `guid` = ? limit 1", sidemenuRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, guid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSidemenuModel) Insert(ctx context.Context, data *Sidemenu) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sidemenuRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Guid, data.ImageUrl,data.WebImageUrl, data.Title, data.Action, data.Priority, data.DisplayFrom, data.DisplayTo, data.Updated, data.Created, data.Active, data.Platform)
	return ret, err
}

func (m *defaultSidemenuModel) Update(ctx context.Context, newData *Sidemenu) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sidemenuRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Guid, newData.ImageUrl,newData.WebImageUrl, newData.Title, newData.Action, newData.Priority, newData.DisplayFrom, newData.DisplayTo, newData.Updated, newData.Created, newData.Active, newData.Platform, newData.Id)
	return err
}

func (m *defaultSidemenuModel) tableName() string {
	return m.table
}

func (m *defaultSidemenuModel) FindAll(ctx context.Context, role string, platform int64) (*[]FindAll, error) {
	currentTime, err := global.TimeInSingapore()
	if err != nil {
		return nil, err
	}
    query := `
        SELECT s.*, c.title AS c_title
        FROM sidemenu s
        RIGHT JOIN category c ON c.id = s.category_id
        WHERE s.active = 1
            AND s.display_from <= ?
            AND s.display_to >= ?
            AND s.platform = ?
            AND c.active = 1
            AND s.role LIKE ?
        ORDER BY c.priority, s.priority ASC;
    `
    roleParam := "%" + role + "%"

    var resp []FindAll
    err = m.conn.QueryRowsCtx(ctx, &resp, query, currentTime, currentTime,platform,roleParam)
    switch err {
    case nil:
        return &resp, nil
    case sqlc.ErrNotFound:
        return nil, ErrNotFound
    default:
        return nil, err
    }
}
