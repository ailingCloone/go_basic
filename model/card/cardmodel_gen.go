// Code generated by goctl. DO NOT EDIT.

package card

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"
	"nrs_customer_module_backend/internal/global"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	cardFieldNames          = builder.RawFieldNames(&Card{})
	cardRows                = strings.Join(cardFieldNames, ",")
	cardRowsExpectAutoSet   = strings.Join(stringx.Remove(cardFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	cardRowsWithPlaceHolder = strings.Join(stringx.Remove(cardFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
	firstDay, lastDay = global.GetFirstAndLastDayOfMonth()
)

type (
	cardModel interface {
		Insert(ctx context.Context, data *Card) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Card, error)
		Update(ctx context.Context, data *Card) error
		Delete(ctx context.Context, id int64) error
		FindOneGuid(ctx context.Context, guid string) (*Card, error)
		FindAllCard(ctx context.Context) (*[]Card, error)
		FindAllMember(ctx context.Context, id int64) (int, error)
		FindAllCustomerCard(ctx context.Context) (int, error)
		FindAllCustomerCardMonthly(ctx context.Context) (int, error)
		FindAllCustomerCardPreviousMonth(ctx context.Context) (int, error)
		FindAllCustomerCardRenew(ctx context.Context) (int, error)
		FindAllCustomerCardRenewMonthly(ctx context.Context) (int, error)
		FindAllCustomerCardRenewPreviousMonth(ctx context.Context) (int, error)
		FindOneEmailTemplateInfo(ctx context.Context) (*EmailTemplateInfo, error) 
		// FindOneEmailTemplateId(ctx context.Context) (int64, error) 
		// UpdateCard(ctx context.Context, data *Card) error
		UpdateCard(ctx context.Context, data *Card,attributesName string,value interface{}) error
		FindAllCardList(ctx context.Context) (*[]Card, error)
		FindOneCardCode(ctx context.Context, cardCode string) (*Card, error)
	}

	defaultCardModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Card struct {
		Id               int64     `db:"id"`
		Guid             string    `db:"guid"`
		CardCategory     int64     `db:"card_category"` // Portal Used - 0: Inactive, 1: P1 Card, 2: EZ Credit Account, 3: Deactivate Card, 5. SCOIN
		Code             string    `db:"code"`
		Title            string    `db:"title"`
		Description      string    `db:"description"`
		ImageUrl         string    `db:"image_url"`
		WebImageUrl         string    `db:"web_image_url"`
		Priority         int64     `db:"priority"`
		Payment          int64     `db:"payment"`           // Need payment
		Price            float64   `db:"price"`             // Payment Price
		Validity         int64     `db:"validity"`          // Validity in month
		Register         int64     `db:"register"`          // Able to register
		RegisterPriority int64     `db:"register_priority"` // Register Priority
		Renew            int64     `db:"renew"`             // Able to renew
		RenewPriority    int64     `db:"renew_priority"`    // Renew Priority
		Upgrade          int64     `db:"upgrade"`           // Able to upgarde
		UpgradePriority  int64     `db:"upgrade_priority"`  // Upgrade Priority
		Ekyc int64 `db:"ekyc"`
		Invitation int64 `db:"invitation"`
		Updated          time.Time    `db:"updated"`
		Created          time.Time    `db:"created"`
		Active           int64     `db:"active"` // 0- Inactive, 1- Active
	}

	CardInfo struct {
		Guid        string `json:"guid,omitempty"`
		Title       string `json:"title"`
		Value       string `json:"value"`
		ImageUrl    string `json:"image_url"`
		WebImageUrl    string `json:"web_image_url"`
		Description string `json:"description,omitempty"`
	}
	
	CardSettingResponse struct {
		Guid        string      `json:"guid"`
		Title       string      `json:"title"`
		Description string      `json:"description,omitempty"`
		Type        string 		`json:"type"` //1: Normal 2: Radio 3:Text, 4:Switch, 5:Dropdown, 6:CheckBox
		Value       interface{} `json:"value,omitempty"`
		Selected    int64       `json:"selected"`
		Dwname      string      `json:"dwname,omitempty"`
	}
	CardSettingResponseWithoutSelected struct {
		Guid        string      `json:"guid"`
		Title       string      `json:"title"`
		Description string      `json:"description,omitempty"`
		Type        string 		`json:"type"` //1: Normal 2: Radio 3:Text, 4:Switch, 5:Dropdown, 6:CheckBox
		Value       interface{} `json:"value,omitempty"`
		Dwname      string      `json:"dwname,omitempty"`
	}
	
	TypeValue struct {
		Guid     string `json:"guid"`
		Title    string `json:"title"`
		Selected int64  `json:"selected"`
		Dwname   string `json:"dwname"`
	}

	EmailTemplateInfo struct {
		ReferID     int64
		ReferTable  string
	}
	
	CardGetList struct {
		Guid        string  `json:"guid"`
		ImageUrl    string  `json:"image_url"`
		WebImageUrl string  `json:"web_image_url"`
		Title       string  `json:"title"`
		Code        string  `json:"code"`
		NeedPayment int64   `json:"need_payment"` // Need payment
		Price       string  `json:"price"`        // Payment Price
	}
)

func newCardModel(conn sqlx.SqlConn) *defaultCardModel {
	return &defaultCardModel{
		conn:  conn,
		table: "`card`",
	}
}

func (m *defaultCardModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCardModel) FindOne(ctx context.Context, id int64) (*Card, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cardRows, m.table)
	var resp Card
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCardModel) Insert(ctx context.Context, data *Card) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?)", m.table, cardRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Guid, data.CardCategory, data.Code, data.Title, data.Description, data.ImageUrl,data.WebImageUrl, data.Priority, data.Payment, data.Price, data.Validity, data.Register, data.RegisterPriority, data.Renew, data.RenewPriority, data.Upgrade, data.UpgradePriority, data.Updated, data.Created, data.Active)
	return ret, err
}

func (m *defaultCardModel) Update(ctx context.Context, data *Card) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, cardRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Guid, data.CardCategory, data.Code, data.Title, data.Description, data.ImageUrl,data.WebImageUrl, data.Priority, data.Payment, data.Price, data.Validity, data.Register, data.RegisterPriority, data.Renew, data.RenewPriority, data.Upgrade, data.UpgradePriority, data.Updated, data.Created, data.Active, data.Id)
	return err
}

func (m *defaultCardModel) tableName() string {
	return m.table
}

func (m *defaultCardModel) FindOneGuid(ctx context.Context, guid string) (*Card, error) {
	query := fmt.Sprintf("select %s from %s where active  = 1 and `guid` = ? limit 1", cardRows, m.table)
	var resp Card
	err := m.conn.QueryRowCtx(ctx, &resp, query, guid)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//display all the member card which is active = 1
func (m *defaultCardModel) FindAllCard(ctx context.Context) (*[]Card, error) {
	query := fmt.Sprintf("select %s from %s where active  = 1 order by id", cardRows, m.table)
    var resp []Card
    err := m.conn.QueryRowsCtx(ctx, &resp, query)
    switch err {
    case nil:
        return &resp, nil
    case sqlx.ErrNotFound:
        return nil, ErrNotFound
    default:
        return nil, err
    }
}

//count total amount of the member for each card -> id: use to pass card id
func (m *defaultCardModel) FindAllMember(ctx context.Context,id int64) (int, error) {
	countQuery := `
	SELECT COUNT(*) 
	FROM customer_card 
	WHERE active = 1 
	AND card_id = ?
	`

	var count int
	err := m.conn.QueryRowCtx(ctx, &count, countQuery,id)
	if err != nil {
		return 0, err
	}

	return count, nil
}

//count total amount of customer card
func (m *defaultCardModel) FindAllCustomerCard(ctx context.Context) (int, error) {
	countQuery := `
		SELECT COUNT(*) 
		FROM customer_card
		WHERE active = 1
	`

	var count int
	err := m.conn.QueryRowCtx(ctx, &count, countQuery)
	if err != nil {
		return 0, err
	}

	return count, nil
}

//count total amount of the customer card previously (excluded current month)
func (m *defaultCardModel) FindAllCustomerCardPreviousMonth(ctx context.Context) (int, error) {
	countQuery := `
		SELECT COUNT(*) 
		FROM customer_card
		WHERE active = 1
		AND created < ?
	`

	var count int
	err := m.conn.QueryRowCtx(ctx, &count, countQuery,firstDay)
	if err != nil {
		return 0, err
	}

	return count, nil
}

//count total amount of the customer card current month (only current month)
func (m *defaultCardModel) FindAllCustomerCardMonthly(ctx context.Context) (int, error) {
	countQuery := `
		SELECT COUNT(*) 
		FROM customer_card
		WHERE active = 1
		AND created >= ?
		AND created <= ?	
	`

	var count int
	err := m.conn.QueryRowCtx(ctx, &count, countQuery,firstDay,lastDay)
	if err != nil {
		return 0, err
	}

	return count, nil
}

//count total amount of the renewed customer card
func (m *defaultCardModel) FindAllCustomerCardRenew(ctx context.Context) (int, error) {
	countQuery := `
	SELECT COUNT(*) 
	FROM customer_card
	WHERE active = 1 AND renew_at != '0000-00-00 00:00:00'
	`
	var count int
	err := m.conn.QueryRowCtx(ctx, &count, countQuery)
	if err != nil {
		return 0, err
	}

	return count, nil
}

//count total amount of the renewed customer card previously (excluded current month)
func (m *defaultCardModel) FindAllCustomerCardRenewPreviousMonth(ctx context.Context) (int, error) {
	countQuery := `
	SELECT COUNT(*) 
	FROM customer_card
	WHERE active = 1 AND renew_at != '0000-00-00 00:00:00'
	AND renew_at < ?
`
	var count int
	err := m.conn.QueryRowCtx(ctx, &count, countQuery,firstDay)
	fmt.Println("firstday:",firstDay)
	if err != nil {
		return 0, err
	}

	return count, nil
}

//count total amount of the renewed customer card current month (only current month)
func (m *defaultCardModel) FindAllCustomerCardRenewMonthly(ctx context.Context) (int, error) {
	countQuery := `
	SELECT COUNT(*) 
	FROM customer_card
	WHERE active = 1 AND renew_at != '0000-00-00 00:00:00'
	AND renew_at >= ?
	AND renew_at <= ?
`
	var count int
	err := m.conn.QueryRowCtx(ctx, &count, countQuery,firstDay,lastDay)
	if err != nil {
		return 0, err
	}

	return count, nil
}
// func (m *defaultCardModel) FindOneEmailTemplateId(ctx context.Context) (int64, error) {
// 	query := `
// 		SELECT s.refer_id,s.refer_table
// 		FROM ui_summary s
// 		LEFT JOIN ui u ON u.id = s.ui_id AND u.active = 1
// 		LEFT JOIN category c ON u.category_id = c.id AND c.active = 1
// 		WHERE s.active = 1
// 		AND s.refer_table = 'email_template'
// 		LIMIT 1
// 	`

// 	// Define a variable to hold the ui_id retrieved from the database
// 	var uiID int64

// 	// Execute the query and scan the result into the uiID variable
// 	err := m.conn.QueryRowCtx(ctx, &uiID, query)
// 	if err != nil {
// 		// Handle the error if query execution fails
// 		return 0, err
// 	}

// 	// Return the retrieved ui_id
// 	return uiID, nil
// }

func (m *defaultCardModel) FindOneEmailTemplateInfo(ctx context.Context) (*EmailTemplateInfo, error) {
	// Define the SQL query to retrieve refer_id and refer_table from ui_summary table
	query := `
		SELECT s.refer_id, s.refer_table
		FROM ui_summary s
		LEFT JOIN ui u ON u.id = s.ui_id AND u.active = 1
		LEFT JOIN category c ON u.category_id = c.id AND c.active = 1
		WHERE s.active = 1
		AND s.refer_table = 'email_template'
		LIMIT 1
	`

	var resp EmailTemplateInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCardModel) UpdateCard(ctx context.Context, data *Card, attributesName string, value interface{}) error {
    query := fmt.Sprintf("UPDATE %s SET `%s` = ?, updated = ? WHERE `guid` = ? and active = 1", m.table, attributesName)
    
	_, err := m.conn.ExecCtx(ctx, query, value,data.Updated,data.Guid)
	return err
}

func (m *defaultCardModel) FindAllCardList(ctx context.Context) (*[]Card, error) {
	query := fmt.Sprintf("select %s from %s where active  = 1 and register = 1 order by id", cardRows, m.table)
    var resp []Card
    err := m.conn.QueryRowsCtx(ctx, &resp, query)
    switch err {
    case nil:
        return &resp, nil
    case sqlx.ErrNotFound:
        return nil, ErrNotFound
    default:
        return nil, err
    }
}

func (m *defaultCardModel) FindOneCardCode(ctx context.Context, cardCode string) (*Card, error) {
	query := fmt.Sprintf("select %s from %s where `code` = ? and `active` = 1 limit 1", cardRows, m.table)
	var resp Card
	err := m.conn.QueryRowCtx(ctx, &resp, query, cardCode)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

