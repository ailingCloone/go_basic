// Code generated by goctl. DO NOT EDIT.

package ui

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	uiFieldNames          = builder.RawFieldNames(&Ui{})
	uiRows                = strings.Join(uiFieldNames, ",")
	uiRowsExpectAutoSet   = strings.Join(stringx.Remove(uiFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	uiRowsWithPlaceHolder = strings.Join(stringx.Remove(uiFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	uiModel interface {
		Insert(ctx context.Context, data *Ui) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Ui, error)
		Update(ctx context.Context, data *Ui) error
		Delete(ctx context.Context, id int64) error
		FindOneUiHeader(ctx context.Context,headerId int64) (*UiHeader, error)
		FindUiSummary(ctx context.Context,uiId int64) ([]UISummary, error)
		FindUiContent(ctx context.Context,uiId int64) ([]UIContent, error)
		FindUiButton(ctx context.Context,uiId int64) ([]UIButton, error)
		FindUiTitle(ctx context.Context,uiId int64) ([]UiTitle, error)
		FindOneCategoryId(ctx context.Context, categoryId int64) (*Ui, error)
		FindSubUiButton(ctx context.Context,parentId int64) (*[]UIButton, error)
		FindUiOneContent(ctx context.Context,categoryId int64) (*UIContent, error)
	}

	defaultUiModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Ui struct {
		Id          int64         `db:"id"`
		Guid        string        `db:"guid"`
		CategoryId  sql.NullInt64 `db:"category_id"`
		UiHeaderId  sql.NullInt64 `db:"ui_header_id"`
		Description string        `db:"description"`
		Updated     time.Time     `db:"updated"`
		Created     time.Time     `db:"created"`
		Active      int64         `db:"active"` // 0- Inactive , 1- Active
	}

	UiHeader struct {
		Id          int64     `db:"id"`
		Guid        string    `db:"guid"`
		ImageUrl    string    `db:"image_url"`
		WebImageUrl string    `db:"web_image_url"`
		Title       string    `db:"title"`
		Description string    `db:"description"`
		Updated     time.Time `db:"updated"`
		Created     time.Time `db:"created"`
		Active      int64     `db:"active"`
	}

	UISummary struct {
		UiId        int64         `db:"ui_id"`
		UiTitleId   sql.NullInt64 `db:"ui_title_id"`
		TabPriority int64         `db:"tab_priority"`
		Type        int64         `db:"type"`
		ReferTable  string        `db:"refer_table"`
		ReferId     int64         `db:"refer_id"`
		Priority    int64         `db:"priority"`
		Active      int64         `db:"active"`
	}

	UIContent struct {
		Id                    int64     `db:"id"`   //ui_button id
		Guid                  string    `db:"guid"` //ui_button guid
		Type                  int64     `db:"type"` //1: Normal 2: Radio 3:Text, 4:Switch, 5:Dropdown, 6:CheckBox
		Dwname                string    `db:"dwname"`
		Required              int64     `db:"required"`
		ValidationDescription string    `db:"validation_description"`
		ImageUrl              string    `db:"image_url"`
		WebImageUrl           string    `db:"web_image_url"`
		Description           string    `db:"description"`
		LeftIcon              string    `db:"left_icon"`
		LeftDesc              string    `db:"left_desc"`
		Title                 string    `db:"title"`
		Placeholder           string    `db:"placeholder"`
		RightIcon             string    `db:"right_icon"`
		RightDesc             string    `db:"right_desc"`
		Updated               time.Time `db:"updated"`
		Created               time.Time `db:"created"`
		Active                int64     `db:"active"` //0- Inactive , 1- Active
	}

	UIButton struct { //ui_buton
		Id                    int64     `db:"id"`   //ui_button id
		Guid                  string    `db:"guid"` //ui_button guid
		Type                  int64     `db:"type"` //1: Normal 2: Radio 3:Text, 4:Switch, 5:Dropdown, 6:CheckBox
		Required              int64     `db:"required"`
		ValidationDescription string    `db:"validation_description"`
		Text                  string    `db:"text"`
		Action                string    `db:"action"` //If it is switch button, it will be a replaced text
		Dwname                string    `db:"dwname"`
		ParentId              string    `db:"parent_id"`
		Priority              string    `db:"priority"`
		Updated               time.Time `db:"updated"`
		Created               time.Time `db:"created"`
		Active                int       `db:"active"` //0- Inactive , 1- Active
	}

	UiTitle struct {
		Id          int64     `db:"id"`
		Guid        string    `db:"guid"`
		Title 		string 	  `db:"title"`
		Description string    `db:"description"`
		Updated     time.Time `db:"updated"`
		Created     time.Time `db:"created"`
		Active      int64     `db:"active"`
	}

	//response

	Dialog struct {
        Content DialogContent `json:"content"`
        Button []Button `json:"button"`
	}

	DialogContent struct {
		ImageUrl    string `json:"image_url"`
		WebImageUrl string `json:"web_image_url"`
		Title       string `json:"title"`
		Subtitle    string `json:"subtitle"`
	}

	Header struct {
		ImageUrl    string `json:"image_url,omitempty"`
		WebImageUrl string `json:"web_image_url,omitempty"`
		Title       string `json:"title,omitempty"`
		Description string `json:"description,omitempty"`
	}

	Button struct {
		Type                  string `json:"type"`
		Dwname                string `json:"dwname"`
		Text                  string `json:"text"`
		Action                string `json:"action"`
		Required              int64  `json:"required"`
		ValidationDescription string `json:"validation_description"`
	}

	TabContent struct {
		Title   string    `json:"title,omitempty"`
		// Header  Header    `json:"header,omitempty"`
		Content []Content `json:"content"`
		Button  []Button  `json:"button"`
	}

	Content struct {
		Id                    int64  `json:"id,omitempty"`
		Type                  string `json:"type"`
		Dwname                string `json:"dwname"`
		LeftIcon              string `json:"left_icon,omitempty"`
		LeftDesc              string `json:"left_desc,omitempty"`
		RightIcon             string `json:"right_icon,omitempty"`
		ImageUrl              string `json:"image_url,omitempty"`
		WebImageUrl           string `json:"web_image_url,omitempty"`
		Title                 string `json:"title,omitempty"`
		Description           string `json:"description,omitempty"`
		Placeholder           string `json:"placeholder"`
		Action                string `json:"action,omitempty"`
		Required              int64  `json:"required"`
		ValidationDescription string `json:"validation_description"`
	}

	UiResp struct {
		SideImage string       `json:"side_image"`
		Header    Header       `json:"header"`
		Tab       []TabContent `json:"tab"`
	}
	RegisterUiResp struct {
		Guid        string       `json:"guid"`
		Title       string       `json:"title"`
		Description string       `json:"description"`
		Section     ContentResp `json:"section"`
	}

	ContentResp struct {
		Header  Header    `json:"header,omitempty"`
		Content []Content `json:"content"`
		Button  []Button  `json:"button"`
	}

	UiContentResp struct {
		Guid        string       `json:"guid"`
		Title       string       `json:"title"`
		Description string       `json:"description"`
		Section     []TabContent `json:"section"`
	}

	UI struct { //ui
		Id          int64         `db:"id"`
		Guid        string        `db:"guid"`
		CategoryId  sql.NullInt64 `db:"category_id"`
		UiHeaderId  sql.NullInt64 `db:"ui_header_id"`
		Description string        `db:"description"`
		Updated     time.Time     `db:"updated"`
		Created     time.Time     `db:"created"`
		Active      int64         `db:"active"`
	}

)

func newUiModel(conn sqlx.SqlConn) *defaultUiModel {
	return &defaultUiModel{
		conn:  conn,
		table: "`ui`",
	}
}

func (m *defaultUiModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUiModel) FindOne(ctx context.Context, categoryId int64) (*Ui, error) {
	query := fmt.Sprintf("select %s from %s where `category_id` = ? and `active` = 1 limit 1", uiRows, m.table)
	var resp Ui
	err := m.conn.QueryRowCtx(ctx, &resp, query, categoryId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUiModel) Insert(ctx context.Context, data *Ui) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, uiRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Guid, data.CategoryId, data.UiHeaderId, data.Description, data.Updated, data.Created, data.Active)
	return ret, err
}

func (m *defaultUiModel) Update(ctx context.Context, data *Ui) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, uiRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Guid, data.CategoryId, data.UiHeaderId, data.Description, data.Updated, data.Created, data.Active, data.Id)
	return err
}

func (m *defaultUiModel) tableName() string {
	return m.table
}

func (m *defaultUiModel) FindOneUiHeader(ctx context.Context,headerId int64) (*UiHeader, error) {
	query := `select * from ui_header where active  = 1 and id = ? limit 1`
	var resp UiHeader
	err := m.conn.QueryRowCtx(ctx, &resp, query,headerId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUiModel) FindUiSummary(ctx context.Context,uiId int64) ([]UISummary, error) {
	query := `
		SELECT *
		FROM ui_summary
		WHERE active = 1 and ui_id =?
		ORDER BY tab_priority,priority
	`
	var resp []UISummary
	err := m.conn.QueryRowsCtx(ctx, &resp, query,uiId)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *defaultUiModel) FindUiContent(ctx context.Context,uiId int64) ([]UIContent, error) {
	query := `
		SELECT c.* 
		FROM ui_content c
		INNER JOIN ui_summary s ON s.refer_table = 'ui_content' AND s.refer_id = c.id AND s.ui_id = ? AND s.active = 1
		WHERE c.active = 1
		ORDER BY s.tab_priority,s.priority
	`
	var resp []UIContent
	err := m.conn.QueryRowsCtx(ctx, &resp, query,uiId)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *defaultUiModel) FindUiButton(ctx context.Context,uiId int64) ([]UIButton, error) {
	query := `
	select b.*
	from ui_button b
	inner join ui_summary s on s.refer_table = 'ui_button' and s.refer_id = b.id and s.ui_id = ? and s.active = 1
	where b.active = 1
	order by s.tab_priority,s.priority
	`
	var resp []UIButton
	err := m.conn.QueryRowsCtx(ctx, &resp, query,uiId)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *defaultUiModel) FindUiTitle(ctx context.Context,uiId int64) ([]UiTitle, error) {
	query := `
	select t.*
	from ui_title t
	inner join ui_summary s on t.id = s.ui_title_id and s.ui_id = ? and s.active = 1
	where t.active = 1
	group by t.id
	order by s.tab_priority,s.priority
	`
	var resp []UiTitle
	err := m.conn.QueryRowsCtx(ctx, &resp, query,uiId)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *defaultUiModel) FindOneCategoryId(ctx context.Context, categoryId int64) (*Ui, error) {
	query := fmt.Sprintf("select %s from %s where `category_id` = ? and `active` = 1 limit 1", uiRows, m.table)
	var resp Ui
	err := m.conn.QueryRowCtx(ctx, &resp, query, categoryId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUiModel) FindSubUiButton(ctx context.Context,parentId int64) (*[]UIButton, error) {
	query := `select * from ui_button  where active = 1  and parent_id = ?
`
	var resp []UIButton
	err := m.conn.QueryRowsCtx(ctx, &resp, query,parentId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUiModel) FindUiOneContent(ctx context.Context,uiId int64) (*UIContent, error) {
	query := `
		SELECT c.* 
		FROM ui_content c
		INNER JOIN ui_summary s ON s.refer_table = 'ui_content' AND s.refer_id = c.id AND s.ui_id = ? AND s.active = 1
		WHERE c.active = 1
		ORDER BY s.tab_priority,s.priority
		limit 1
	`
	var resp UIContent
	err := m.conn.QueryRowCtx(ctx, &resp, query,uiId)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}