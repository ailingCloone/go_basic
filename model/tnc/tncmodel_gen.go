// Code generated by goctl. DO NOT EDIT.

package tnc

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	// "github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tncFieldNames          = builder.RawFieldNames(&Tnc{})
	tncRows                = strings.Join(tncFieldNames, ",")
	tncRowsExpectAutoSet   = strings.Join(stringx.Remove(tncFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tncRowsWithPlaceHolder = strings.Join(stringx.Remove(tncFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tncModel interface {
		Insert(ctx context.Context, data *Tnc) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Tnc, error)
		Update(ctx context.Context, data *Tnc) error
		Delete(ctx context.Context, id int64) error
		FindOneByCard(ctx context.Context, referId int64) (*Tnc, error)
		FindOneGuid(ctx context.Context, guid string) (*Tnc, error)
		UpdateByGuid(ctx context.Context, data *Tnc) error
		DeleteByGuid(ctx context.Context, data *Tnc) error
	}

	defaultTncModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Tnc struct {
		Id          int64     `db:"id"`
		Guid        string    `db:"guid"`
		ReferTable  string    `db:"refer_table"`
		ReferId     int64    `db:"refer_id"`
		Title       string    `db:"title"`
		Description string    `db:"description"` // In html
		Updated     time.Time `db:"updated"`
		Created     time.Time `db:"created"`
		Active      int64     `db:"active"` // 0- Inactive, 1- Active
	}
)

func newTncModel(conn sqlx.SqlConn) *defaultTncModel {
	return &defaultTncModel{
		conn:  conn,
		table: "`tnc`",
	}
}

func (m *defaultTncModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTncModel) FindOne(ctx context.Context, id int64) (*Tnc, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tncRows, m.table)
	var resp Tnc
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTncModel) Insert(ctx context.Context, data *Tnc) (sql.Result, error) {

	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, tncRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Guid, data.ReferTable, data.ReferId, data.Title, data.Description, data.Updated, data.Created, data.Active)
	return ret, err
}

func (m *defaultTncModel) Update(ctx context.Context, data *Tnc) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tncRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Guid, data.ReferTable, data.ReferId, data.Title, data.Description, data.Updated, data.Created, data.Active, data.Id)
	return err
}

func (m *defaultTncModel) tableName() string {
	return m.table
}

func (m *defaultTncModel) FindOneByCard(ctx context.Context, referId int64) (*Tnc, error) {
	query := fmt.Sprintf("SELECT %s FROM %s WHERE `refer_id` = ? AND `active` = 1 ORDER BY id DESC LIMIT 1", tncRows, m.table)
	var resp Tnc
	err := m.conn.QueryRowCtx(ctx, &resp, query, referId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTncModel) FindOneGuid(ctx context.Context, guid string) (*Tnc, error) {
	query := fmt.Sprintf("select %s from %s where `guid` = ? AND `active` = 1 limit 1", tncRows, m.table)
	var resp Tnc
	err := m.conn.QueryRowCtx(ctx, &resp, query, guid)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTncModel) UpdateByGuid(ctx context.Context, data *Tnc) error {
	query := fmt.Sprintf("update %s set %s where `guid` = ? AND `active` = 1", m.table, tncRowsWithPlaceHolder)
	fmt.Println("query yoda",query)

	_, err := m.conn.ExecCtx(ctx, query, data.Guid, data.ReferTable, data.ReferId, data.Title, data.Description, data.Updated, data.Created, data.Active, data.Guid)
	fmt.Println("???",err)
	return err
}

func (m *defaultTncModel) DeleteByGuid(ctx context.Context, data *Tnc) error {
	query := fmt.Sprintf("update %s set %s where `guid` = ? AND `active` = 1", m.table, tncRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Guid, data.ReferTable, data.ReferId, data.Title, data.Description, data.Updated, data.Created, data.Active, data.Guid)
	return err
}

