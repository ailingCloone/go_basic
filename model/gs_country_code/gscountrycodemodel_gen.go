// Code generated by goctl. DO NOT EDIT.

package gs_country_code

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	gsCountryCodeFieldNames          = builder.RawFieldNames(&GsCountryCode{})
	gsCountryCodeRows                = strings.Join(gsCountryCodeFieldNames, ",")
	gsCountryCodeRowsExpectAutoSet   = strings.Join(stringx.Remove(gsCountryCodeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	gsCountryCodeRowsWithPlaceHolder = strings.Join(stringx.Remove(gsCountryCodeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	gsCountryCodeModel interface {
		Insert(ctx context.Context, data *GsCountryCode) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GsCountryCode, error)
		Update(ctx context.Context, data *GsCountryCode) error
		Delete(ctx context.Context, id int64) error
		FindAll(ctx context.Context) (*[]GsCountryCode, error)
	}

	defaultGsCountryCodeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GsCountryCode struct {
		Id          int64     `db:"id"`
		Guid        string    `db:"guid"`
		ImageUrl    string    `db:"image_url"`
		WebImageUrl string    `db:"web_image_url"`
		Name        string    `db:"name"`
		Code        string    `db:"code"`
		Updated     time.Time `db:"updated"`
		Created     time.Time `db:"created"`
		Active      int64     `db:"active"` // 0-Inactive, 1- Active
	}

	CountryCodeContent struct{
		Guid        string    `json:"guid"`
		ImageUrl    string    `json:"image_url"`
		WebImageUrl string    `json:"web_image_url"`
		Title        string    `json:"title"`
		Code        string    `json:"code"`
	}
)

func newGsCountryCodeModel(conn sqlx.SqlConn) *defaultGsCountryCodeModel {
	return &defaultGsCountryCodeModel{
		conn:  conn,
		table: "`gs_country_code`",
	}
}

func (m *defaultGsCountryCodeModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGsCountryCodeModel) FindOne(ctx context.Context, id int64) (*GsCountryCode, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", gsCountryCodeRows, m.table)
	var resp GsCountryCode
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGsCountryCodeModel) Insert(ctx context.Context, data *GsCountryCode) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, gsCountryCodeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Guid, data.ImageUrl, data.WebImageUrl, data.Name, data.Code, data.Updated, data.Created, data.Active)
	return ret, err
}

func (m *defaultGsCountryCodeModel) Update(ctx context.Context, data *GsCountryCode) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, gsCountryCodeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Guid, data.ImageUrl, data.WebImageUrl, data.Name, data.Code, data.Updated, data.Created, data.Active, data.Id)
	return err
}

func (m *defaultGsCountryCodeModel) tableName() string {
	return m.table
}

func (m *defaultGsCountryCodeModel) FindAll(ctx context.Context) (*[]GsCountryCode, error) {
	query := fmt.Sprintf("select %s from %s where `active` = 1", gsCountryCodeRows, m.table)
	var resp []GsCountryCode
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
