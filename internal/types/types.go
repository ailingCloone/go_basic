// Code generated by goctl. DO NOT EDIT.
package types

type Details struct {
	Field  string `json:"field"`
	Reason string `json:"reason"`
}

type EmailDelivery struct {
	Contact    *string `json:"contact"`
	SendStatus *string `json:"send_status"`
	SendTime   *string `json:"send_time"`
}

type ErrorDetails struct {
	Code    string  `json:"code"`
	Message string  `json:"message"`
	Details Details `json:"details"`
}

type ErrorResponse struct {
	Error ErrorDetails `json:"error"`
}

type FailedResponse struct {
	Success bool        `json:"success"`
	Message string      `json:"message"`
	Data    interface{} `json:"data"`
}

type GetCardDetailsReq struct {
	Version string `form:"version"` //
	Guid    string `form:"guid"`    // guid from get card list
}

type GetCardListReq struct {
	Version string `form:"version"` //
}

type GetListRegistrationReq struct {
	Version string `form:"version,required"` // version
	Status  string `form:"status,required"`  // status 1:Pending, 2: Approve, 3: Reject , 4: All
	Search  string `form:"search, optional" `
	Code    int    `form:"code,optional"  `
}

type GetUiReq struct {
	Type    string `path:"type"` // login, register, otp_verification, member_upgrade, country_code
	Version string `query:"version"`
	From    string `form:"from" validate:"required,fromValidator"` // staff,customer
}

type ListHeader struct {
	Title string `json:"title"`
	Key   string `json:"key"`
}

type OtpDetailsContent struct {
	AuthType      string         `json:"auth_type"`
	EmailDelivery *EmailDelivery `json:"email_delivery"`
	Message       string         `json:"message"`
	PhoneDelivery *PhoneDelivery `json:"phone_delivery"`
	TxID          string         `json:"txId"`
}

type OtpReq struct {
	Contact string `form:"contact"`                                // based on type SMS (Phone), EMAIL (email)
	Version string `form:"version"`                                //
	Type    string `form:"type" validate:"required,typeValidator"` //EMAIL,CONTACT,IC
	From    string `form:"from" validate:"required,fromValidator"` // staff,customer
	Page    string `form:"page" validate:"required,pageValidator"` // login,register,profile_update
}

type OtpVerifyReq struct {
	Contact string `form:"contact"` // based on type SMS (Phone), EMAIL (email)
	Code    string `form:"code"`    //  otp code
	TxId    string `form:"txid"`    // Get from  /app/otp/request
}

type PhoneDelivery struct {
	Contact    *string `json:"contact"`     // Use pointer to string
	SendStatus *string `json:"send_status"` // Use pointer to string
	SendTime   *string `json:"send_time"`   // Use pointer to string
}

type PostATAddReq struct {
	Version string `form:"version,required"` //
	Guid    string `form:"guid,required"`    // guid from membercard
	Title   string `form:"title,required"`   //
	Content string `form:"content,required"` // in html
}

type PostATDeleteReq struct {
	Version string `form:"version,required"` //
	Guid    string `form:"guid,required"`    // guid from agree_term
}

type PostATEditReq struct {
	Version string `form:"version,required"` //
	Guid    string `form:"guid,required"`    // guid from agree_term
	Title   string `form:"title,required"`   //
	Content string `form:"content,required"` // in html
}

type PostATGetReq struct {
	Version string `form:"version,required"` //
	Guid    string `form:"guid,required"`    //  guid from agree_term
}

type PostCardGetListReq struct {
	Type string `form:"type,required"` //Register/Upgrade/Renew
}

type PostCardSettingEditReq struct {
	Guid   string `form:"guid,required"`   // Get from /portal/membercard/setting/get guid
	Dwname string `form:"dwname,required"` // Get from /portal/membercard/setting/get dwname
	Value  string `form:"value,required"`  //
}

type PostCardSettingGetReq struct {
	Version string `form:"version,required"` //
	Guid    string `form:"guid,required"`    // guid from card
}

type PostCountryCodeGetReq struct {
}

type PostDashboardReq struct {
	Version string `form:"version,required"` //
}

type PostFileUploadReq struct {
	File []byte `form:"file,required"` // The image file data
	Path string `form:"path, omitempty"`
}

type PostForgotPasswordAppReq struct {
	Version string `form:"version,required"` //
	Email   string `form:"email,required"`
	From    string `form:"from,required"`
}

type PostForgotPasswordReq struct {
	Version string `form:"version,required"` //
	Email   string `form:"email,required"`
}

type PostLoginAppReq struct {
	Contact string `form:"contact,required"`                       //Can be contact,icno, or email
	Code    string `form:"code,required"`                          //otp code or password
	TxId    string `form:"txid,optional" validate:"omitempty"`     //Get from otp request if login by contact or ic
	Type    string `form:"type" validate:"required,typeValidator"` //EMAIL,CONTACT,IC
	From    string `form:"from" validate:"required,fromValidator"` // staff,customer
}

type PostLoginPortalReq struct {
	Contact string `form:"contact,required"`                       //Can be email
	Code    string `form:"code,required"`                          // password
	TxId    string `form:"txid,optional" validate:"omitempty"`     //Get from otp request if login by contact or ic
	Type    string `form:"type" validate:"required,typeValidator"` //EMAIL
}

type PostLoginUIReq struct {
	Version string `form:"version,required"` //
}

type PostLogoutReq struct {
	Guid string `form:"guid,required"` //
}

type PostPortalResetPasswordReq struct {
	TxId            string `form:"txid"` // Get from  /portal/forgot_password
	Code            string `form:"code"` // otp code
	NewPassword     string `form:"new_password"`
	ConfirmPassword string `form:"confirm_password"`
}

type PostRefreshTokenReq struct {
	RefreshToken string `form:"refresh_token,required"`
}

type PostResetPasswordAppReq struct {
	TxId            string `form:"txid"` // Get from  /portal/forgot_password
	Code            string `form:"code"` // otp code
	NewPassword     string `form:"new_password"`
	ConfirmPassword string `form:"confirm_password"`
	From            string `form:"from,required"`
}

type PostSTAddReq struct {
	Version string `form:"version,required"` //
	Guid    string `form:"guid,required"`    // guid from membercard
	Title   string `form:"title,required"`   //
	Content string `form:"content,required"` // in html
	Status  string `form:"status,required"`  // '0:Not display in app, 1:Display in app'
}

type PostSTDeleteReq struct {
	Version string `form:"version,required"` //
	Guid    string `form:"guid,required"`    // guid from sms_template
}

type PostSTEditReq struct {
	Version string `form:"version,required"` //
	Guid    string `form:"guid,required"`    // guid from sms_template
	Title   string `form:"title,required"`   //
	Content string `form:"content,required"` // in html
	Status  string `form:"status,required"`  // '0:Not display in app, 1:Display in app'
}

type PostSTGetReq struct {
	Version string `form:"version,required"` //
	Guid    string `form:"guid,required"`    // guid from card
}

type PostTNCAddReq struct {
	Version string `form:"version,required"` //
	Guid    string `form:"guid,required"`    // guid from membercard
	Title   string `form:"title,required"`   //
	Content string `form:"content,required"` // in html
}

type PostTNCDeleteReq struct {
	Version string `form:"version,required"` //
	Guid    string `form:"guid,required"`    // guid from tnc
}

type PostTNCEditReq struct {
	Version string `form:"version,required"` //
	Guid    string `form:"guid,required"`    // guid from tnc
	Title   string `form:"title,required"`   //
	Content string `form:"content,required"` // in html
}

type PostTNCGetReq struct {
	Version string `form:"version,required"` //
	Guid    string `form:"guid,required"`    // guid from tnc
}

type Response struct {
	Success *SuccessResponse `json:"success,omitempty"`
	Failed  *FailedResponse  `json:"failed,omitempty"`
	Error   *ErrorResponse   `json:"error,omitempty"`
}

type SidemenuReq struct {
	Version string `form:"version"`
}

type SplashReq struct {
	IsFirst string `form:"is_first"` // true, false (Is first app launch)
	Version string `form:"version"`  //
}

type SuccessResponse struct {
	Success bool        `json:"success"`
	Message string      `json:"message"`
	Data    interface{} `json:"data"`
}

type TokenResponse struct {
	AccessToken  string `json:"access_token"`
	TokenType    string `json:"token_type"`
	ExpiresIn    int    `json:"expires_in"`
	RefreshToken string `json:"refresh_token,omitempty"`
	ExpiredAt 	 string `json:"expired_at,omitempty"`
}
