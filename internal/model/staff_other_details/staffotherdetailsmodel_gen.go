// Code generated by goctl. DO NOT EDIT.

package staff_other_details

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	staffOtherDetailsFieldNames          = builder.RawFieldNames(&StaffOtherDetails{})
	staffOtherDetailsRows                = strings.Join(staffOtherDetailsFieldNames, ",")
	staffOtherDetailsRowsExpectAutoSet   = strings.Join(stringx.Remove(staffOtherDetailsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	staffOtherDetailsRowsWithPlaceHolder = strings.Join(stringx.Remove(staffOtherDetailsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	staffOtherDetailsModel interface {
		Insert(ctx context.Context, data *StaffOtherDetails) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*StaffOtherDetails, error)
		Update(ctx context.Context, data *StaffOtherDetails) error
		Delete(ctx context.Context, id int64) error
		FindOneByStaffId(ctx context.Context, id int64) (*StaffOtherDetails, error)
	}

	defaultStaffOtherDetailsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	StaffOtherDetails struct {
		Id            int64     `db:"id"`
		Guid          string     `db:"guid"`
		ImageUrl      string    `db:"image_url"`
		WebImageUrl      string    `db:"web_image_url"`
		StaffId       int64     `db:"staff_id"`
		MaritalStatus int64     `db:"marital_status"`
		Race          int64     `db:"race"`
		Updated       time.Time `db:"updated"`
		Created       time.Time `db:"created"`
		Active        int64     `db:"active"` // 0-Inactive,1-Active
	}
)

func newStaffOtherDetailsModel(conn sqlx.SqlConn) *defaultStaffOtherDetailsModel {
	return &defaultStaffOtherDetailsModel{
		conn:  conn,
		table: "`staff_other_details`",
	}
}

func (m *defaultStaffOtherDetailsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultStaffOtherDetailsModel) FindOne(ctx context.Context, id int64) (*StaffOtherDetails, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", staffOtherDetailsRows, m.table)
	var resp StaffOtherDetails
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStaffOtherDetailsModel) Insert(ctx context.Context, data *StaffOtherDetails) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?,?, ?, ?, ?)", m.table, staffOtherDetailsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Guid, data.ImageUrl,data.WebImageUrl, data.StaffId, data.MaritalStatus, data.Race, data.Updated, data.Created, data.Active)
	return ret, err
}

func (m *defaultStaffOtherDetailsModel) Update(ctx context.Context, data *StaffOtherDetails) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, staffOtherDetailsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Guid, data.ImageUrl,data.WebImageUrl, data.StaffId, data.MaritalStatus, data.Race, data.Updated, data.Created, data.Active, data.Id)
	return err
}

func (m *defaultStaffOtherDetailsModel) tableName() string {
	return m.table
}

func (m *defaultStaffOtherDetailsModel) FindOneByStaffId(ctx context.Context, id int64) (*StaffOtherDetails, error) {
	query := fmt.Sprintf("select %s from %s where `staff_id` = ? and `active` = 1 limit 1", staffOtherDetailsRows, m.table)
	var resp StaffOtherDetails
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

