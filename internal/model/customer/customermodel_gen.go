// Code generated by goctl. DO NOT EDIT.

package customer

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	customerFieldNames          = builder.RawFieldNames(&Customer{})
	customerRows                = strings.Join(customerFieldNames, ",")
	customerRowsExpectAutoSet   = strings.Join(stringx.Remove(customerFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	customerRowsWithPlaceHolder = strings.Join(stringx.Remove(customerFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	customerModel interface {
		Insert(ctx context.Context, data *Customer) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Customer, error)
		Update(ctx context.Context, data *Customer) error
		Delete(ctx context.Context, id int64) error
		FindOneGuid(ctx context.Context, guid string) (*Customer, error)
		FindOneEmail(ctx context.Context, email string) (*Customer, error)
		FindOneContact(ctx context.Context, contact string) (*Customer, error)
		FindOneIC(ctx context.Context, ic string) (*Customer, error)
		UpdatePassword(ctx context.Context, data *Customer) error	
	}

	defaultCustomerModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Customer struct {
		Id          int64     `db:"id"`
		Guid        string    `db:"guid"`
		Code        string    `db:"code"`
		Password    string    `db:"password"`
		Fullname    string    `db:"fullname"`
		Username    string    `db:"username"`
		Icno        string    `db:"icno"`
		Dob         time.Time `db:"dob"`
		CountryCode string    `db:"country_code"`
		Contact     string    `db:"contact"`
		Email       string    `db:"email"`
		Updated     time.Time `db:"updated"`
		Created     time.Time `db:"created"`
		Active      int64     `db:"active"` //  0: Inactive, 1: P1 Card, 2: EZ Credit Account, 3: Deactivate Card, 5. SCOIN
	}

	CustomerInfo struct {
		Guid      string `json:"guid"`
		ImageUrl  string `json:"image_url"`
		WebImageUrl  string `json:"web_image_url"`
		Name      string `json:"name"`
		Contact   string `json:"contact"`
		Email     string `json:"email"`
		Icno      string `json:"icno"`
	}
	
)

func newCustomerModel(conn sqlx.SqlConn) *defaultCustomerModel {
	return &defaultCustomerModel{
		conn:  conn,
		table: "`customer`",
	}
}

func (m *defaultCustomerModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCustomerModel) FindOne(ctx context.Context, id int64) (*Customer, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", customerRows, m.table)
	var resp Customer
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCustomerModel) Insert(ctx context.Context, data *Customer) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, customerRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Guid, data.Code, data.Password, data.Fullname, data.Username, data.Icno, data.Dob, data.CountryCode, data.Contact, data.Email, data.Updated, data.Created, data.Active)
	return ret, err
}

func (m *defaultCustomerModel) Update(ctx context.Context, data *Customer) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, customerRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Guid, data.Code, data.Password, data.Fullname, data.Username, data.Icno, data.Dob, data.CountryCode, data.Contact, data.Email, data.Updated, data.Created, data.Active, data.Id)
	return err
}

func (m *defaultCustomerModel) tableName() string {
	return m.table
}

func (m *defaultCustomerModel) FindOneGuid(ctx context.Context, guid string) (*Customer, error) {
	query := fmt.Sprintf("select %s from %s where active  = 1 and `guid` = ? limit 1", customerRows, m.table)
	var resp Customer
	err := m.conn.QueryRowCtx(ctx, &resp, query, guid)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCustomerModel) FindOneEmail(ctx context.Context, email string) (*Customer, error) {
	query := fmt.Sprintf("select %s from %s where active  = 1 and `email` = ? limit 1", customerRows, m.table)
	var resp Customer
	err := m.conn.QueryRowCtx(ctx, &resp, query, email)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCustomerModel) FindOneContact(ctx context.Context, contact string) (*Customer, error) {
    query := fmt.Sprintf("select %s from %s where `contact` = ? AND `active` = 1 limit 1", customerRows, m.table)
    var resp Customer
    err := m.conn.QueryRowCtx(ctx, &resp, query, contact)
    switch err {
    case nil:
        return &resp, nil
    case sqlx.ErrNotFound:
        return nil, ErrNotFound
    default:
        return nil, err
    }
}

func (m *defaultCustomerModel) FindOneIC(ctx context.Context, ic string) (*Customer, error) {
    query := fmt.Sprintf("select %s from %s where `icno` = ? AND `active` = 1 limit 1", customerRows, m.table)
    var resp Customer
    err := m.conn.QueryRowCtx(ctx, &resp, query, ic)
    switch err {
    case nil:
        return &resp, nil
    case sqlx.ErrNotFound:
        return nil, ErrNotFound
    default:
        return nil, err
    }
}


func (m *defaultCustomerModel) UpdatePassword(ctx context.Context, data *Customer) error {
	query := fmt.Sprintf("UPDATE %s SET `password` = ?, `updated` = ? WHERE `email` = ? AND `active` = 1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, data.Password,data.Updated, data.Email)
	return err
}


