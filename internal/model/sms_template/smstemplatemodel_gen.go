// Code generated by goctl. DO NOT EDIT.

package sms_template

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	smsTemplateFieldNames          = builder.RawFieldNames(&SmsTemplate{})
	smsTemplateRows                = strings.Join(smsTemplateFieldNames, ",")
	smsTemplateRowsExpectAutoSet   = strings.Join(stringx.Remove(smsTemplateFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	smsTemplateRowsWithPlaceHolder = strings.Join(stringx.Remove(smsTemplateFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	smsTemplateModel interface {
        Insert(ctx context.Context, data *SmsTemplate) (sql.Result, error)
        FindOne(ctx context.Context, id int64) (*SmsTemplate, error)
        Update(ctx context.Context, data *SmsTemplate) error
        Delete(ctx context.Context, id int64) error
        FindAllByCard(ctx context.Context,referId int64) (*[]SmsTemplate, error)
        FindOneGuid(ctx context.Context, guid string) (*SmsTemplate, error)
        UpdateByGuid(ctx context.Context, data *SmsTemplate) error
        DeleteByGuid(ctx context.Context, data *SmsTemplate) error
		FindOneReferId(ctx context.Context, referTable string,referId int64) (*SmsTemplate, error) 
    }


	defaultSmsTemplateModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SmsTemplate struct {
		Id          int64     `db:"id"`
		Guid        string    `db:"guid"`
		ReferTable  string    `db:"refer_table"`
		ReferId     int64     `db:"refer_id"`
		Title       string    `db:"title"`
		Description string    `db:"description"`
		Status      int64     `db:"status"` // 0:Not display in app, 1:Display in app
		Updated     time.Time `db:"updated"`
		Created     time.Time `db:"created"`
		Active      int64     `db:"active"` // 0:Inactive, 1:Active
	}

	SmsTemplateResponse struct {
		Guid string `json:"guid"`
		Title string `json:"title"`
		Description string `json:"content"`
		Status string `json:"status"`
	}

)

func newSmsTemplateModel(conn sqlx.SqlConn) *defaultSmsTemplateModel {
	return &defaultSmsTemplateModel{
		conn:  conn,
		table: "`sms_template`",
	}
}

func (m *defaultSmsTemplateModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSmsTemplateModel) FindOne(ctx context.Context, id int64) (*SmsTemplate, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", smsTemplateRows, m.table)
	var resp SmsTemplate
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSmsTemplateModel) Insert(ctx context.Context, data *SmsTemplate) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, smsTemplateRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Guid, data.ReferTable, data.ReferId, data.Title, data.Description, data.Status, data.Updated, data.Created, data.Active)
	return ret, err
}

func (m *defaultSmsTemplateModel) Update(ctx context.Context, data *SmsTemplate) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, smsTemplateRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Guid, data.ReferTable, data.ReferId, data.Title, data.Description, data.Status, data.Updated, data.Created, data.Active, data.Id)
	return err
}

func (m *defaultSmsTemplateModel) tableName() string {
	return m.table
}


func (m *defaultSmsTemplateModel) FindAllByCard(ctx context.Context, referId int64) (*[]SmsTemplate, error) {
    query := fmt.Sprintf("SELECT %s FROM %s WHERE `refer_id` = ? AND `active` = 1 ORDER BY id DESC", smsTemplateRows, m.table)
    var resp []SmsTemplate
    err := m.conn.QueryRowsCtx(ctx, &resp, query, referId)
    switch err {
    case nil:
        return &resp, nil
    case sqlx.ErrNotFound:
        return nil, ErrNotFound
    default:
        return nil, err
    }
}

func (m *defaultSmsTemplateModel) FindOneGuid(ctx context.Context, guid string) (*SmsTemplate, error) {
    query := fmt.Sprintf("select %s from %s where `guid` = ? AND `active` = 1 limit 1", smsTemplateRows, m.table)
    var resp SmsTemplate
    err := m.conn.QueryRowCtx(ctx, &resp, query, guid)
    switch err {
    case nil:
        return &resp, nil
    case sqlx.ErrNotFound:
        return nil, ErrNotFound
    default:
        return nil, err
    }
}

func (m *defaultSmsTemplateModel) UpdateByGuid(ctx context.Context, data *SmsTemplate) error {
    query := fmt.Sprintf("update %s set %s where `guid` = ? AND `active` = 1", m.table, smsTemplateRowsWithPlaceHolder)
    _, err := m.conn.ExecCtx(ctx, query, data.Guid, data.ReferTable, data.ReferId, data.Title, data.Description,data.Status, data.Updated, data.Created, data.Active, data.Guid)
    return err
}

func (m *defaultSmsTemplateModel) DeleteByGuid(ctx context.Context, data *SmsTemplate) error {
    query := fmt.Sprintf("update %s set %s where `guid` = ? AND `active` = 1", m.table, smsTemplateRowsWithPlaceHolder)
    _, err := m.conn.ExecCtx(ctx, query, data.Guid, data.ReferTable, data.ReferId, data.Title, data.Description,data.Status, data.Updated, data.Created, data.Active, data.Guid)
    return err
}

func (m *defaultSmsTemplateModel) FindOneReferId(ctx context.Context, referTable string,referId int64) (*SmsTemplate, error) {
    query := fmt.Sprintf("select %s from %s where `refer_table` = ? and`refer_id` = ? AND `active` = 1 limit 1", smsTemplateRows, m.table)
    var resp SmsTemplate
    err := m.conn.QueryRowCtx(ctx, &resp, query, referTable,referId)
    switch err {
    case nil:
        return &resp, nil
    case sqlx.ErrNotFound:
        return nil, ErrNotFound
    default:
        return nil, err
    }
}
