// Code generated by goctl. DO NOT EDIT.

package oauth

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	oauthFieldNames          = builder.RawFieldNames(&Oauth{})
	oauthRows                = strings.Join(oauthFieldNames, ",")
	oauthRowsExpectAutoSet   = strings.Join(stringx.Remove(oauthFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	oauthRowsWithPlaceHolder = strings.Join(stringx.Remove(oauthFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	oauthModel interface {
		Insert(ctx context.Context, data *Oauth) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Oauth, error)
		Update(ctx context.Context, data *Oauth) error
		Delete(ctx context.Context, id int64) error
		FindOneByCustomerId(ctx context.Context, id int64) (*Oauth, error)
		FindOneByStaffId(ctx context.Context, id int64) (*Oauth, error)
		FindOneByRefreshToken(ctx context.Context, refreshToken string) (*Oauth, error)
		UpdateById(ctx context.Context, data *Oauth) error
		CheckBearerTokenBeforeLogin(ctx context.Context,bearerToken string,tenantId int64) (*Oauth, error)
		CheckBearerTokenAfterLogin(ctx context.Context,bearerToken string,tenantId int64) (*Oauth, error)
		CheckOauthStaffActive(ctx context.Context,userId int64) (*Oauth, error)
		CheckOauthCustomerActive(ctx context.Context,userId int64) (*Oauth, error)
	}

	defaultOauthModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Oauth struct {
		Id           int64         `db:"id"`
		CustomerId   sql.NullInt64 `db:"customer_id"`
		StaffId      sql.NullInt64 `db:"staff_id"`
		TenantId     sql.NullInt64 `db:"tenant_id"`
		LoginBy      int64 		   `db:"login_by"`
		AccessToken  string        `db:"access_token"`
		RefreshToken string        `db:"refresh_token"`
		ExpiresIn    int           `db:"expires_in"`
		Scope        int64         `db:"scope"`
		TokenType    string        `db:"token_type"`
		Updated      time.Time     `db:"updated"`
		Created      time.Time     `db:"created"`
		Active       int64         `db:"active"`
	}

	TokenInfo struct {
		AccessToken  string `json:"access_token"`
		RefreshToken string `json:"refresh_token"`
		ExpiredAt    string `json:"expired_at"`
		ExpiresIn    int    `json:"expires_in"`
	}

)

func newOauthModel(conn sqlx.SqlConn) *defaultOauthModel {
	return &defaultOauthModel{
		conn:  conn,
		table: "`oauth`",
	}
}

func (m *defaultOauthModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOauthModel) FindOne(ctx context.Context, id int64) (*Oauth, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", oauthRows, m.table)
	var resp Oauth
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOauthModel) Insert(ctx context.Context, data *Oauth) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, oauthRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CustomerId, data.StaffId, data.TenantId, data.LoginBy, data.AccessToken, data.RefreshToken, data.ExpiresIn, data.Scope, data.TokenType, data.Updated, data.Created, data.Active)
	return ret, err
}


func (m *defaultOauthModel) Update(ctx context.Context, data *Oauth) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, oauthRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CustomerId, data.StaffId, data.TenantId, data.LoginBy, data.AccessToken, data.RefreshToken, data.ExpiresIn, data.Scope, data.TokenType, data.Updated, data.Created, data.Active, data.Id)
	return err
}

func (m *defaultOauthModel) tableName() string {
	return m.table
}

func (m *defaultOauthModel) FindOneByCustomerId(ctx context.Context, id int64) (*Oauth, error) {
	query := fmt.Sprintf("select %s from %s where active  = 1 and `customer_id` = ? limit 1", oauthRows, m.table)
	var resp Oauth
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOauthModel) FindOneByStaffId(ctx context.Context, id int64) (*Oauth, error) {
	query := fmt.Sprintf("select %s from %s where active  = 1 and `staff_id` = ? limit 1", oauthRows, m.table)
	var resp Oauth
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOauthModel) FindOneByRefreshToken(ctx context.Context, refreshToken string) (*Oauth, error) {
	query := fmt.Sprintf("select %s from %s where active = 1 and `refresh_token` = ? limit 1", oauthRows, m.table)
	var resp Oauth
	err := m.conn.QueryRowCtx(ctx, &resp, query, refreshToken)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOauthModel) UpdateById(ctx context.Context, data *Oauth) error {
	query := fmt.Sprintf("update %s set %s where `id` = ? AND `active` = 1", m.table, oauthRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CustomerId, data.StaffId, data.TenantId, data.LoginBy, data.AccessToken, data.RefreshToken, data.ExpiresIn, data.Scope, data.TokenType, data.Updated, data.Created, data.Active, data.Id)
	return err
}





func (m *defaultOauthModel) CheckBearerTokenBeforeLogin(ctx context.Context,bearerToken string,tenantId int64) (*Oauth, error) {
	query := `select * from oauth
	where active = 1
	and token_type = 'Bearer'
	and customer_id IS NULL
	and staff_id IS NULL
	and tenant_id = ?
	and access_token = ?
	`
	var resp Oauth
	err := m.conn.QueryRowCtx(ctx, &resp, query,tenantId,bearerToken)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOauthModel) CheckBearerTokenAfterLogin(ctx context.Context,bearerToken string,tenantId int64) (*Oauth, error) {
	query := `select * from oauth
	where active = 1
	and token_type = 'Bearer'
	and access_token = ?
	`
	var resp Oauth
	err := m.conn.QueryRowCtx(ctx, &resp, query,bearerToken)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOauthModel) CheckOauthStaffActive(ctx context.Context,userId int64) (*Oauth, error) {
	query := `select * from oauth
	where active = 1
	and staff_id = ?
	`
	var resp Oauth
	err := m.conn.QueryRowCtx(ctx, &resp, query,userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOauthModel) CheckOauthCustomerActive(ctx context.Context,userId int64) (*Oauth, error) {
	query := `select * from oauth
	where active = 1
	and customer_id = ?
	`
	var resp Oauth
	err := m.conn.QueryRowCtx(ctx, &resp, query,userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

