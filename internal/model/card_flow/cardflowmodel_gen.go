// Code generated by goctl. DO NOT EDIT.

package card_flow

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	cardFlowFieldNames          = builder.RawFieldNames(&CardFlow{})
	cardFlowRows                = strings.Join(cardFlowFieldNames, ",")
	cardFlowRowsExpectAutoSet   = strings.Join(stringx.Remove(cardFlowFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	cardFlowRowsWithPlaceHolder = strings.Join(stringx.Remove(cardFlowFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	cardFlowModel interface {
		Insert(ctx context.Context, data *CardFlow) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CardFlow, error)
		Update(ctx context.Context, data *CardFlow) error
		Delete(ctx context.Context, id int64) error
		FindOneCategoryId(ctx context.Context, categoryId int64) (*[]CardFlowUi, error)
	}

	defaultCardFlowModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CardFlow struct {
		Id          int64         `db:"id"`
		Guid        string        `db:"guid"`
		CategoryId  int64         `db:"category_id"`
		UiId        sql.NullInt64 `db:"ui_id"`
		Title       string        `db:"title"`
		Description string        `db:"description"`
		Status      int64         `db:"status"` // 0- Off, 1- On, 2-On Only
		Priority    int64         `db:"priority"`
		Updated     time.Time     `db:"updated"`
		Created     time.Time     `db:"created"`
		Active      int64         `db:"active"` // 0-Inactive, 1-Active
	}

	CardFlowUi struct {
		Guid          string `db:"guid"`
		Title         string `db:"title"`
		Description   string `db:"description"`
		Status        int64  `db:"status"` // 0- Off, 1- On, 2-On Only
		UiId          int64  `db:"ui_id"`
		UiHeaderId    int64  `db:"ui_header_id"`
		UiDescription string `db:"ui_description"`
	}
)

func newCardFlowModel(conn sqlx.SqlConn) *defaultCardFlowModel {
	return &defaultCardFlowModel{
		conn:  conn,
		table: "`card_flow`",
	}
}

func (m *defaultCardFlowModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCardFlowModel) FindOne(ctx context.Context, id int64) (*CardFlow, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cardFlowRows, m.table)
	var resp CardFlow
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCardFlowModel) Insert(ctx context.Context, data *CardFlow) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, cardFlowRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Guid, data.CategoryId, data.UiId, data.Title, data.Description, data.Status, data.Priority, data.Updated, data.Created, data.Active)
	return ret, err
}

func (m *defaultCardFlowModel) Update(ctx context.Context, data *CardFlow) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, cardFlowRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Guid, data.CategoryId, data.UiId, data.Title, data.Description, data.Status, data.Priority, data.Updated, data.Created, data.Active, data.Id)
	return err
}

func (m *defaultCardFlowModel) tableName() string {
	return m.table
}

func (m *defaultCardFlowModel) FindOneCategoryId(ctx context.Context, categoryId int64) (*[]CardFlowUi, error) {
	query := `SELECT f.guid,f.title,f.description, f.status,u.id as ui_id,u.ui_header_id,u.description as ui_description
	FROM card_flow f 
	LEFT JOIN ui u ON f.ui_id = u.id AND u.active = 1
	WHERE f.active = 1 AND f.category_id = ?
	ORDER BY f.priority`
	var resp []CardFlowUi
	err := m.conn.QueryRowsCtx(ctx, &resp, query, categoryId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

