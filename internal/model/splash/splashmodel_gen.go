// Code generated by goctl. DO NOT EDIT.

package splash

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"
	"nrs_customer_module_backend/internal/global"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	splashFieldNames          = builder.RawFieldNames(&Splash{})
	splashRows                = strings.Join(splashFieldNames, ",")
	splashRowsExpectAutoSet   = strings.Join(stringx.Remove(splashFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	splashRowsWithPlaceHolder = strings.Join(stringx.Remove(splashFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	splashModel interface {
		Insert(ctx context.Context, data *Splash) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Splash, error)
		FindOneByGuid(ctx context.Context, guid sql.NullString) (*Splash, error)
		Update(ctx context.Context, data *Splash) error
		Delete(ctx context.Context, id int64) error
		FindAll(ctx context.Context, isFirst bool) (*[]FindAll, error)
	}

	defaultSplashModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Splash struct {
		Id           int64          `db:"id"`
		Guid         sql.NullString `db:"guid"`
		PageNumber   sql.NullInt64  `db:"page_number"` // Page 1, 2, 3, 4
		ImageUrl     sql.NullString `db:"image_url"`
		WebImageUrl     sql.NullString `db:"web_image_url"`
		Description  sql.NullString `db:"description"`
		Title        sql.NullString `db:"title"`
		RedirectLink sql.NullString `db:"redirect_link"`
		ButtonText   sql.NullString `db:"button_text"`
		ButtonAction sql.NullString `db:"button_action"` // Button action  like “./login”
		Priority     sql.NullInt64  `db:"priority"`      // The record will order based on this column, 1,2,3
		DisplayFrom  time.Time      `db:"display_from"`  // Display from date time
		DisplayTo    time.Time      `db:"display_to"`    // Display until date time
		IsFirsttime  sql.NullInt64  `db:"is_firsttime"`  // If is firs time, then app will display it, else won’t display it
		Updated      time.Time      `db:"updated"`
		Created      time.Time      `db:"created"`
		Active       int64          `db:"active"`   // 0- Inactive , 1- Active
		Platform     int64          `db:"platform"` // 1- App 2-Portal
		Role         sql.NullString `db:"role"`
	}

	FindAll struct {
		Id           int64          `db:"id"`
		Guid         sql.NullString `db:"guid"`
		PageNumber   sql.NullInt64  `db:"page_number"` // Page 1, 2, 3, 4
		ImageUrl     sql.NullString `db:"image_url"`
		WebImageUrl     sql.NullString `db:"web_image_url"`
		Description  sql.NullString `db:"description"`
		Title        sql.NullString `db:"title"`
		RedirectLink sql.NullString `db:"redirect_link"`
		ButtonText   sql.NullString `db:"button_text"`
		ButtonAction sql.NullString `db:"button_action"` // Button action  like “./login”
		Priority     sql.NullInt64  `db:"priority"`      // The record will order based on this column, 1,2,3
		DisplayFrom  time.Time      `db:"display_from"`  // Display from date time
		DisplayTo    time.Time      `db:"display_to"`    // Display until date time
		IsFirsttime  sql.NullInt64  `db:"is_firsttime"`  // If is firs time, then app will display it, else won’t display it
		Updated      time.Time      `db:"updated"`
		Created      time.Time      `db:"created"`
		Active       int64          `db:"active"`   // 0- Inactive , 1- Active
		Platform     int64          `db:"platform"` // 1- App 2-Portal
		Role         sql.NullString `db:"role"`
	}
	//splash response struct
	SplashEntryWithButton struct {
		Guid         string `json:"guid"`
		ImageData    []ImageData `json:"image_data"`
		Button       Button     `json:"button,omitempty"`
	}
	SplashEntryWithoutButton struct {
		Guid         string `json:"guid"`
		ImageData    []ImageData `json:"image_data"`
	}
	
	ImageData struct {
		ImageUrl     string `json:"image_url"`
		WebImageUrl     string `json:"web_image_url"`
		Description  string `json:"description,omitempty"`
		Title        string `json:"title,omitempty"`
		RedirectLink string `json:"redirect_link,omitempty"`
	}
	
	Button struct {
		ButtonText   string `json:"button_text,omitempty"`
		ButtonAction string `json:"button_action,omitempty"`
	}
	
)

func newSplashModel(conn sqlx.SqlConn) *defaultSplashModel {
	return &defaultSplashModel{
		conn:  conn,
		table: "`splash`",
	}
}

func (m *defaultSplashModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSplashModel) FindOne(ctx context.Context, id int64) (*Splash, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", splashRows, m.table)
	var resp Splash
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSplashModel) FindOneByGuid(ctx context.Context, guid sql.NullString) (*Splash, error) {
	var resp Splash
	query := fmt.Sprintf("select %s from %s where `guid` = ? limit 1", splashRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, guid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSplashModel) Insert(ctx context.Context, data *Splash) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?)", m.table, splashRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Guid, data.PageNumber, data.ImageUrl,data.WebImageUrl, data.Description, data.Title, data.RedirectLink, data.ButtonText, data.ButtonAction, data.Priority, data.DisplayFrom, data.DisplayTo, data.IsFirsttime, data.Updated, data.Created, data.Active, data.Platform, data.Role)
	return ret, err
}

func (m *defaultSplashModel) Update(ctx context.Context, newData *Splash) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, splashRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Guid, newData.PageNumber, newData.ImageUrl,newData.WebImageUrl, newData.Description, newData.Title, newData.RedirectLink, newData.ButtonText, newData.ButtonAction, newData.Priority, newData.DisplayFrom, newData.DisplayTo, newData.IsFirsttime, newData.Updated, newData.Created, newData.Active, newData.Platform, newData.Role, newData.Id)
	return err
}

func (m *defaultSplashModel) tableName() string {
	return m.table
}

func (m *defaultSplashModel) FindAll(ctx context.Context, isFirst bool) (*[]FindAll, error) {
	currentTime, err := global.TimeInSingapore()
	if err != nil {
		return nil, err
	}

    var whereClause string
    var queryParams []interface{}
    queryParams = append(queryParams, currentTime, currentTime)

	//check isFirst value
    if isFirst {
        whereClause = " AND (`is_firsttime` = ? OR `is_firsttime` = ?)"
        queryParams = append(queryParams, 1, 0)
    } else {
        whereClause = " AND `is_firsttime` = ?"
        queryParams = append(queryParams, 0)
    }

    query := fmt.Sprintf("SELECT %s FROM %s WHERE `active` = 1 AND `display_from` <= ? AND `display_to` >= ?%s ORDER BY page_number,priority ASC", splashRows, m.table, whereClause)

    var resp []FindAll
    err = m.conn.QueryRowsCtx(ctx, &resp, query, queryParams...)
    switch err {
    case nil:
        return &resp, nil
    case sqlc.ErrNotFound:
        return nil, ErrNotFound
    default:
        return nil, err
    }
}

