// Code generated by goctl. DO NOT EDIT.

package email_template

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	emailTemplateFieldNames          = builder.RawFieldNames(&EmailTemplate{})
	emailTemplateRows                = strings.Join(emailTemplateFieldNames, ",")
	emailTemplateRowsExpectAutoSet   = strings.Join(stringx.Remove(emailTemplateFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	emailTemplateRowsWithPlaceHolder = strings.Join(stringx.Remove(emailTemplateFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	emailTemplateModel interface {
		Insert(ctx context.Context, data *EmailTemplate) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*EmailTemplate, error)
		Update(ctx context.Context, data *EmailTemplate) error
		Delete(ctx context.Context, id int64) error
		FindOneGuid(ctx context.Context, guid string) (*EmailTemplate, error)
		UpdateEmailTemplate(ctx context.Context, data *EmailTemplate, value interface{}) error
		FindOneReferId(ctx context.Context, referTable string,referId int64) (*EmailTemplate, error)
	}

	defaultEmailTemplateModel struct {
		conn  sqlx.SqlConn
		table string
	}

	EmailTemplate struct {
		Id          int64     `db:"id"`
		Guid        string    `db:"guid"`
		ReferTable  string    `db:"refer_table"`
		ReferId     int64     `db:"refer_id"`
		Title       string    `db:"title"`
		Description string    `db:"description"`
		Status      int64     `db:"status"` // 0:Not display in app, 1:Display in app
		Updated     time.Time `db:"updated"`
		Created     time.Time `db:"created"`
		Active      int64     `db:"active"` // 0:Inactive, 1:Active
	}
)

func newEmailTemplateModel(conn sqlx.SqlConn) *defaultEmailTemplateModel {
	return &defaultEmailTemplateModel{
		conn:  conn,
		table: "`email_template`",
	}
}

func (m *defaultEmailTemplateModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultEmailTemplateModel) FindOne(ctx context.Context, id int64) (*EmailTemplate, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", emailTemplateRows, m.table)
	var resp EmailTemplate
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEmailTemplateModel) Insert(ctx context.Context, data *EmailTemplate) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, emailTemplateRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Guid, data.ReferTable, data.ReferId, data.Title, data.Description, data.Status, data.Updated, data.Created, data.Active)
	return ret, err
}

func (m *defaultEmailTemplateModel) Update(ctx context.Context, data *EmailTemplate) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, emailTemplateRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Guid, data.ReferTable, data.ReferId, data.Title, data.Description, data.Status, data.Updated, data.Created, data.Active, data.Id)
	return err
}

func (m *defaultEmailTemplateModel) tableName() string {
	return m.table
}

func (m *defaultEmailTemplateModel) FindOneGuid(ctx context.Context, guid string) (*EmailTemplate, error) {
	query := fmt.Sprintf("select %s from %s where `guid` = ? AND `active` = 1 limit 1", emailTemplateRows, m.table)
	var resp EmailTemplate
	err := m.conn.QueryRowCtx(ctx, &resp, query, guid)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEmailTemplateModel) UpdateEmailTemplate(ctx context.Context, data *EmailTemplate, value interface{}) error {
    query := fmt.Sprintf("UPDATE %s SET  description = ?, updated = ? WHERE `guid` = ? and active = 1", m.table)
    
	_, err := m.conn.ExecCtx(ctx, query, value, data.Updated, data.Guid)
	return err
}

func (m *defaultEmailTemplateModel) FindOneReferId(ctx context.Context, referTable string,referId int64) (*EmailTemplate, error) {
	query := fmt.Sprintf("select %s from %s where `refer_table` = ? and `refer_id` = ? limit 1", emailTemplateRows, m.table)
	var resp EmailTemplate
	err := m.conn.QueryRowCtx(ctx, &resp, query,referTable, referId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

