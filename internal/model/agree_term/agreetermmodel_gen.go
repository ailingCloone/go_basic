// Code generated by goctl. DO NOT EDIT.

package agree_term

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	agreeTermFieldNames          = builder.RawFieldNames(&AgreeTerm{})
	agreeTermRows                = strings.Join(agreeTermFieldNames, ",")
	agreeTermRowsExpectAutoSet   = strings.Join(stringx.Remove(agreeTermFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	agreeTermRowsWithPlaceHolder = strings.Join(stringx.Remove(agreeTermFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	agreeTermModel interface {
		Insert(ctx context.Context, data *AgreeTerm) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AgreeTerm, error)
		Update(ctx context.Context, data *AgreeTerm) error
		Delete(ctx context.Context, id int64) error
		FindOneGuid(ctx context.Context, guid string) (*AgreeTerm, error)
		UpdateByGuid(ctx context.Context, data *AgreeTerm) error
		DeleteByGuid(ctx context.Context, data *AgreeTerm) error
		FindOneByCard(ctx context.Context, id int64) (*AgreeTerm, error)
	}

	defaultAgreeTermModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AgreeTerm struct {
		Id          int64     `db:"id"`
		Guid        string    `db:"guid"`
		ReferTable  string    `db:"refer_table"`
		ReferId     int64     `db:"refer_id"`
		Title       string    `db:"title"`
		Description string    `db:"description"` // In html
		Updated     time.Time `db:"updated"`
		Created     time.Time `db:"created"`
		Active      int64     `db:"active"` // 0-Inactive, 1- Active
	}
)

func newAgreeTermModel(conn sqlx.SqlConn) *defaultAgreeTermModel {
	return &defaultAgreeTermModel{
		conn:  conn,
		table: "`agree_term`",
	}
}

func (m *defaultAgreeTermModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAgreeTermModel) FindOne(ctx context.Context, id int64) (*AgreeTerm, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", agreeTermRows, m.table)
	var resp AgreeTerm
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAgreeTermModel) Insert(ctx context.Context, data *AgreeTerm) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, agreeTermRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Guid, data.ReferTable, data.ReferId, data.Title, data.Description, data.Updated, data.Created, data.Active)
	return ret, err
}

func (m *defaultAgreeTermModel) Update(ctx context.Context, data *AgreeTerm) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, agreeTermRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Guid, data.ReferTable, data.ReferId, data.Title, data.Description, data.Updated, data.Created, data.Active, data.Id)
	return err
}

func (m *defaultAgreeTermModel) tableName() string {
	return m.table
}

func (m *defaultAgreeTermModel) FindOneGuid(ctx context.Context, guid string) (*AgreeTerm, error) {
	query := fmt.Sprintf("select %s from %s where `guid` = ? AND `active` = 1 limit 1", agreeTermRows, m.table)
	var resp AgreeTerm
	err := m.conn.QueryRowCtx(ctx, &resp, query, guid)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAgreeTermModel) UpdateByGuid(ctx context.Context, data *AgreeTerm) error {
	query := fmt.Sprintf("update %s set %s where `guid` = ? AND `active` = 1", m.table, agreeTermRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Guid, data.ReferTable, data.ReferId, data.Title, data.Description, data.Updated, data.Created, data.Active, data.Guid)
	return err
}

func (m *defaultAgreeTermModel) DeleteByGuid(ctx context.Context, data *AgreeTerm) error {
	query := fmt.Sprintf("update %s set %s where `guid` = ? AND `active` = 1", m.table, agreeTermRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Guid, data.ReferTable, data.ReferId, data.Title, data.Description, data.Updated, data.Created, data.Active, data.Guid)
	return err
}

func (m *defaultAgreeTermModel) FindOneByCard(ctx context.Context, referId int64) (*AgreeTerm, error) {
	query := fmt.Sprintf("select %s from %s where `refer_id` = ? AND `active` = 1 ORDER BY id DESC LIMIT 1", agreeTermRows, m.table)
	var resp AgreeTerm
	err := m.conn.QueryRowCtx(ctx, &resp, query, referId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}


